services:
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
    expose:
      - "3000"
    # Remove the problematic port range 50000-600000 - Docker socket access handles dynamic ports
    # Browser containers will get dynamically assigned ports
    environment:
      - NODE_ENV=production
      - PORT=3000
      - PORT_RANGE_START=50000
      - PORT_RANGE_END=60000
      - MAX_SESSIONS=200
      - SESSION_TIMEOUT=1800000
      - REDIS_URL=redis://redis:6379
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - redis
    labels:
      # Traefik configuration for load balancing
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=PathPrefix(`/`)"
      - "traefik.http.services.backend.loadbalancer.server.port=3000"
      - "traefik.http.services.backend.loadbalancer.healthcheck.path=/api/health"
    networks:
      - app-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis-data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  proxy:
    image: traefik:v3.0
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --log.level=INFO
    ports:
      - "80:80" # Main API access
      - "8080:8080" # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - app-network
    restart: unless-stopped

volumes:
  redis-data:

networks:
  app-network:
    driver: bridge
